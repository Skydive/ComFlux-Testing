#!/usr/bin/env python3


import sys
import os
import json
from os.path import join
from uuid import uuid4
from zlib import crc32
DUMMY_DIR="./.dummy_tmp/"
uuid = lambda: str(uuid4())[0:8];

def write_configs(id, port):
	app_cfg_path = join(DUMMY_DIR, f"{id}_cfg.json");
	tcp_cfg_path = join(DUMMY_DIR, f"{id}_tcp.json");
	app_cfg = json.JSONEncoder().encode({
			"app_config":{
				"log_level": 5,
				"log_file": join(DUMMY_DIR, f"{id}_app.log")
			},"core_config":{
				"log_level": 5,
				"log_file": join(DUMMY_DIR, f"{id}_core.log"),
				"com_libs": [
					{
						"lib_path": "../lib/libcommoduletcp.so",
						"cfg_path": tcp_cfg_path
					}
				],
				"access_libs": []
			}
		});
	tcp_cfg = json.JSONEncoder().encode({
		"metadata": {
			"name": "comtcp"
		},
		"address": f"127.0.0.1:{port}"
	});
	try:
		os.mkdir(DUMMY_DIR);
	except FileExistsError:
		pass;
	f=open(app_cfg_path, "w");
	f.write(app_cfg);
	f.close();
	f=open(tcp_cfg_path, "w");
	f.write(tcp_cfg);
	f.close();

	return {
		"app_cfg_path": app_cfg_path,
		"tcp_cfg_path": tcp_cfg_path
	};

def main():
	id = uuid();

	args = sys.argv[2:];
	if(len(args) < 1):
		return;

	port = args[0];
	paths = write_configs(id, port);

	cmdline = f"./{sys.argv[1]} {paths['app_cfg_path']} {' '.join(args[1:])}";
	print(cmdline);

	os.system(cmdline);

main();
